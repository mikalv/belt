; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\odzhan\tinycrypt\block\belt\ref\belt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_H	DB	0b1H
	DB	094H
	DB	0baH
	DB	0c8H
	DB	0aH
	DB	08H
	DB	0f5H
	DB	03bH
	DB	036H
	DB	06dH
	DB	00H
	DB	08eH
	DB	058H
	DB	04aH
	DB	05dH
	DB	0e4H
	DB	085H
	DB	04H
	DB	0faH
	DB	09dH
	DB	01bH
	DB	0b6H
	DB	0c7H
	DB	0acH
	DB	025H
	DB	02eH
	DB	072H
	DB	0c2H
	DB	02H
	DB	0fdH
	DB	0ceH
	DB	0dH
	DB	05bH
	DB	0e3H
	DB	0d6H
	DB	012H
	DB	017H
	DB	0b9H
	DB	061H
	DB	081H
	DB	0feH
	DB	067H
	DB	086H
	DB	0adH
	DB	071H
	DB	06bH
	DB	089H
	DB	0bH
	DB	05cH
	DB	0b0H
	DB	0c0H
	DB	0ffH
	DB	033H
	DB	0c3H
	DB	056H
	DB	0b8H
	DB	035H
	DB	0c4H
	DB	05H
	DB	0aeH
	DB	0d8H
	DB	0e0H
	DB	07fH
	DB	099H
	DB	0e1H
	DB	02bH
	DB	0dcH
	DB	01aH
	DB	0e2H
	DB	082H
	DB	057H
	DB	0ecH
	DB	070H
	DB	03fH
	DB	0ccH
	DB	0f0H
	DB	095H
	DB	0eeH
	DB	08dH
	DB	0f1H
	DB	0c1H
	DB	0abH
	DB	076H
	DB	038H
	DB	09fH
	DB	0e6H
	DB	078H
	DB	0caH
	DB	0f7H
	DB	0c6H
	DB	0f8H
	DB	060H
	DB	0d5H
	DB	0bbH
	DB	09cH
	DB	04fH
	DB	0f3H
	DB	03cH
	DB	065H
	DB	07bH
	DB	063H
	DB	07cH
	DB	030H
	DB	06aH
	DB	0ddH
	DB	04eH
	DB	0a7H
	DB	079H
	DB	09eH
	DB	0b2H
	DB	03dH
	DB	031H
	DB	03eH
	DB	098H
	DB	0b5H
	DB	06eH
	DB	027H
	DB	0d3H
	DB	0bcH
	DB	0cfH
	DB	059H
	DB	01eH
	DB	018H
	DB	01fH
	DB	04cH
	DB	05aH
	DB	0b7H
	DB	093H
	DB	0e9H
	DB	0deH
	DB	0e7H
	DB	02cH
	DB	08fH
	DB	0cH
	DB	0fH
	DB	0a6H
	DB	02dH
	DB	0dbH
	DB	049H
	DB	0f4H
	DB	06fH
	DB	073H
	DB	096H
	DB	047H
	DB	06H
	DB	07H
	DB	053H
	DB	016H
	DB	0edH
	DB	024H
	DB	07aH
	DB	037H
	DB	039H
	DB	0cbH
	DB	0a3H
	DB	083H
	DB	03H
	DB	0a9H
	DB	08bH
	DB	0f6H
	DB	092H
	DB	0bdH
	DB	09bH
	DB	01cH
	DB	0e5H
	DB	0d1H
	DB	041H
	DB	01H
	DB	054H
	DB	045H
	DB	0fbH
	DB	0c9H
	DB	05eH
	DB	04dH
	DB	0eH
	DB	0f2H
	DB	068H
	DB	020H
	DB	080H
	DB	0aaH
	DB	022H
	DB	07dH
	DB	064H
	DB	02fH
	DB	026H
	DB	087H
	DB	0f9H
	DB	034H
	DB	090H
	DB	040H
	DB	055H
	DB	011H
	DB	0beH
	DB	032H
	DB	097H
	DB	013H
	DB	043H
	DB	0fcH
	DB	09aH
	DB	048H
	DB	0a0H
	DB	02aH
	DB	088H
	DB	05fH
	DB	019H
	DB	04bH
	DB	09H
	DB	0a1H
	DB	07eH
	DB	0cdH
	DB	0a4H
	DB	0d0H
	DB	015H
	DB	044H
	DB	0afH
	DB	08cH
	DB	0a5H
	DB	084H
	DB	050H
	DB	0bfH
	DB	066H
	DB	0d2H
	DB	0e8H
	DB	08aH
	DB	0a2H
	DB	0d7H
	DB	046H
	DB	052H
	DB	042H
	DB	0a8H
	DB	0dfH
	DB	0b3H
	DB	069H
	DB	074H
	DB	0c5H
	DB	051H
	DB	0ebH
	DB	023H
	DB	029H
	DB	021H
	DB	0d4H
	DB	0efH
	DB	0d9H
	DB	0b4H
	DB	03aH
	DB	062H
	DB	028H
	DB	075H
	DB	091H
	DB	014H
	DB	010H
	DB	0eaH
	DB	077H
	DB	06cH
	DB	0daH
	DB	01dH
_KeyIndex DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
CONST	ENDS
PUBLIC	_HU1
; Function compile flags: /Ogspy
;	COMDAT _HU1
_TEXT	SEGMENT
_x$ = 8							; size = 4
_H$ = 12						; size = 4
_HU1	PROC						; COMDAT
; File c:\odzhan\tinycrypt\block\belt\ref\belt.c
; Line 14
	mov	eax, DWORD PTR _x$[esp-4]
	mov	ecx, DWORD PTR _H$[esp-4]
	sar	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	movzx	eax, BYTE PTR [eax+ecx]
	shl	eax, 24					; 00000018H
; Line 15
	ret	0
_HU1	ENDP
_TEXT	ENDS
PUBLIC	_HU2
; Function compile flags: /Ogspy
;	COMDAT _HU2
_TEXT	SEGMENT
_x$ = 8							; size = 4
_H$ = 12						; size = 4
_HU2	PROC						; COMDAT
; Line 18
	mov	eax, DWORD PTR _x$[esp-4]
	mov	ecx, DWORD PTR _H$[esp-4]
	sar	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	movzx	eax, BYTE PTR [eax+ecx]
	shl	eax, 16					; 00000010H
; Line 19
	ret	0
_HU2	ENDP
_TEXT	ENDS
PUBLIC	_HU3
; Function compile flags: /Ogspy
;	COMDAT _HU3
_TEXT	SEGMENT
_x$ = 8							; size = 4
_H$ = 12						; size = 4
_HU3	PROC						; COMDAT
; Line 22
	mov	eax, DWORD PTR _x$[esp-4]
	mov	ecx, DWORD PTR _H$[esp-4]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movzx	eax, BYTE PTR [eax+ecx]
	shl	eax, 8
; Line 23
	ret	0
_HU3	ENDP
_TEXT	ENDS
PUBLIC	_HU4
; Function compile flags: /Ogspy
;	COMDAT _HU4
_TEXT	SEGMENT
_x$ = 8							; size = 4
_H$ = 12						; size = 4
_HU4	PROC						; COMDAT
; Line 26
	mov	eax, DWORD PTR _x$[esp-4]
	mov	ecx, DWORD PTR _H$[esp-4]
	and	eax, 255				; 000000ffH
	movzx	eax, BYTE PTR [eax+ecx]
; Line 27
	ret	0
_HU4	ENDP
_TEXT	ENDS
PUBLIC	_G
; Function compile flags: /Ogspy
;	COMDAT _G
_TEXT	SEGMENT
_x$ = 8							; size = 4
_H$ = 12						; size = 4
_r$ = 16						; size = 4
_G	PROC						; COMDAT
; Line 30
	mov	edx, DWORD PTR _x$[esp-4]
	push	esi
	mov	esi, DWORD PTR _H$[esp]
	push	edi
	mov	ecx, 255				; 000000ffH
	mov	eax, edx
	sar	eax, 24					; 00000018H
	and	eax, ecx
	movzx	eax, BYTE PTR [eax+esi]
	mov	edi, edx
	sar	edi, 16					; 00000010H
	and	edi, ecx
	movzx	edi, BYTE PTR [edi+esi]
	shl	eax, 8
	or	eax, edi
	mov	edi, edx
	sar	edi, 8
	and	edi, ecx
	movzx	edi, BYTE PTR [edi+esi]
	shl	eax, 8
	and	edx, ecx
	movzx	ecx, BYTE PTR [edx+esi]
	or	eax, edi
	shl	eax, 8
	or	eax, ecx
	mov	cl, BYTE PTR _r$[esp+4]
	pop	edi
	rol	eax, cl
	pop	esi
; Line 31
	ret	0
_G	ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _load32
_TEXT	SEGMENT
_load32	PROC						; COMDAT
; _in$ = ecx
; Line 41
	movzx	eax, BYTE PTR [ecx+3]
	movzx	edx, BYTE PTR [ecx+2]
	shl	eax, 8
	or	eax, edx
	movzx	edx, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [ecx]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
; Line 42
	ret	0
_load32	ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT _store32
_TEXT	SEGMENT
_store32 PROC						; COMDAT
; _out$ = ecx
; _v$ = eax
; Line 48
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+1], dl
; Line 49
	mov	edx, eax
	mov	BYTE PTR [ecx], al
	shr	edx, 16					; 00000010H
; Line 50
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
; Line 51
	ret	0
_store32 ENDP
_TEXT	ENDS
PUBLIC	_belt_init
; Function compile flags: /Ogspy
;	COMDAT _belt_init
_TEXT	SEGMENT
_ks$ = 8						; size = 4
_k$ = 12						; size = 4
_klen$ = 16						; size = 4
_belt_init PROC						; COMDAT
; Line 86
	push	ebp
	mov	ebp, esp
; Line 88
	cmp	DWORD PTR _klen$[ebp], 16		; 00000010H
	push	esi
	push	edi
	je	$LN12@belt_init
	push	24					; 00000018H
	pop	edx
	cmp	DWORD PTR _klen$[ebp], edx
	je	SHORT $LN8@belt_init
	push	32					; 00000020H
	pop	esi
	cmp	DWORD PTR _klen$[ebp], esi
	jne	$LN9@belt_init
; Line 108
	mov	ecx, DWORD PTR _ks$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, ecx
$LL3@belt_init:
; Line 110
	mov	dl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	esi
	jne	SHORT $LL3@belt_init
; Line 112
	jmp	$LN9@belt_init
$LN8@belt_init:
; Line 99
	mov	esi, DWORD PTR _k$[ebp]
	mov	edi, DWORD PTR _ks$[ebp]
	mov	ecx, esi
	mov	eax, edi
	sub	ecx, edi
	push	ebx
$LL7@belt_init:
; Line 101
	mov	bl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [eax], bl
	inc	eax
	dec	edx
	jne	SHORT $LL7@belt_init
; Line 103
	lea	ecx, DWORD PTR [esi+8]
	call	_load32
	lea	ecx, DWORD PTR [esi+4]
	mov	ebx, eax
	call	_load32
	mov	ecx, esi
	xor	ebx, eax
	call	_load32
	xor	eax, ebx
	lea	ecx, DWORD PTR [edi+24]
	call	_store32
; Line 104
	lea	ecx, DWORD PTR [esi+20]
	call	_load32
	lea	ecx, DWORD PTR [esi+16]
	mov	ebx, eax
	call	_load32
	lea	ecx, DWORD PTR [esi+12]
	xor	ebx, eax
	call	_load32
	xor	eax, ebx
	pop	ebx
	lea	ecx, DWORD PTR [edi+28]
	pop	edi
	pop	esi
; Line 114
	pop	ebp
; Line 104
	jmp	_store32
$LN12@belt_init:
; Line 91
	mov	edi, DWORD PTR _ks$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	esi, edi
	xor	ecx, ecx
	sub	esi, eax
$LL11@belt_init:
; Line 93
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [esi+eax], dl
; Line 94
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [edi+ecx+16], dl
	inc	ecx
	inc	eax
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LL11@belt_init
$LN9@belt_init:
	pop	edi
	pop	esi
; Line 114
	pop	ebp
	ret	0
_belt_init ENDP
_TEXT	ENDS
PUBLIC	_belt_encrypt
; Function compile flags: /Ogspy
;	COMDAT _belt_encrypt
_TEXT	SEGMENT
_key$ = -52						; size = 32
tv328 = -20						; size = 4
_tmp$ = -16						; size = 4
_a$ = -12						; size = 4
_d$ = -8						; size = 4
_b$ = -4						; size = 4
_out$ = 8						; size = 4
_c$ = 12						; size = 4
_in$ = 12						; size = 4
_ks$ = 16						; size = 4
_belt_encrypt PROC					; COMDAT
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
; Line 118
	mov	esi, DWORD PTR _in$[ebp]
	push	edi
	mov	ecx, esi
	call	_load32
; Line 119
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR _a$[ebp], eax
	call	_load32
; Line 120
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR _b$[ebp], eax
	call	_load32
; Line 121
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR _c$[ebp], eax
	call	_load32
; Line 127
	mov	esi, DWORD PTR _ks$[ebp]
	mov	DWORD PTR _d$[ebp], eax
	xor	ebx, ebx
	push	7
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR _key$[ebp+4]
	mov	DWORD PTR _key$[ebp], ebx
	rep stosd
	lea	eax, DWORD PTR _key$[ebp]
	xor	edi, edi
	sub	esi, eax
$LL6@belt_encry:
	lea	ecx, DWORD PTR [esi+edi*4]
	lea	ecx, DWORD PTR _key$[ebp+ecx]
; Line 129
	call	_load32
	mov	DWORD PTR _key$[ebp+edi*4], eax
	inc	edi
	cmp	edi, 8
	jb	SHORT $LL6@belt_encry
; Line 132
	xor	edi, edi
	mov	esi, OFFSET _H
$LL13@belt_encry:
; Line 134
	mov	eax, DWORD PTR _KeyIndex[edi]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _a$[ebp]
	push	5
	push	esi
	push	eax
	call	_G
	xor	DWORD PTR _b$[ebp], eax
; Line 135
	mov	eax, DWORD PTR _KeyIndex[edi+4]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _d$[ebp]
	push	21					; 00000015H
	push	esi
	push	eax
	call	_G
	xor	DWORD PTR _c$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _KeyIndex[edi+8]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _b$[ebp]
	push	13					; 0000000dH
	push	esi
	push	eax
	call	_G
	sub	DWORD PTR _a$[ebp], eax
; Line 137
	mov	eax, DWORD PTR _KeyIndex[edi+12]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _c$[ebp]
	push	21					; 00000015H
	add	eax, DWORD PTR _b$[ebp]
	push	esi
	inc	ebx
	push	eax
	mov	DWORD PTR tv328[ebp], ebx
	call	_G
	mov	ebx, eax
	xor	ebx, DWORD PTR tv328[ebp]
; Line 140
	mov	eax, DWORD PTR _KeyIndex[edi+16]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	sub	DWORD PTR _c$[ebp], ebx
	add	eax, DWORD PTR _c$[ebp]
	push	13					; 0000000dH
	push	esi
	push	eax
	call	_G
	add	DWORD PTR _d$[ebp], eax
; Line 143
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _KeyIndex[edi+20]
	mov	ecx, DWORD PTR _key$[ebp+ecx*4]
	push	21					; 00000015H
	add	ecx, eax
	push	esi
	push	ecx
	mov	DWORD PTR _tmp$[ebp], eax
	call	_G
	add	ebx, DWORD PTR _b$[ebp]
	add	esp, 72					; 00000048H
	xor	eax, ebx
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _KeyIndex[edi+24]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _d$[ebp]
	push	5
	push	esi
	push	eax
	call	_G
	xor	eax, DWORD PTR _c$[ebp]
; Line 144
	mov	ecx, DWORD PTR _d$[ebp]
	mov	ebx, DWORD PTR tv328[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _tmp$[ebp]
	add	edi, 28					; 0000001cH
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp$[ebp], eax
	mov	DWORD PTR _b$[ebp], ecx
	mov	DWORD PTR _c$[ebp], eax
	cmp	edi, 224				; 000000e0H
	jb	$LL13@belt_encry
; Line 147
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, ecx
	mov	ecx, esi
	call	_store32
; Line 148
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [esi+4]
	call	_store32
; Line 149
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [esi+8]
	call	_store32
; Line 150
	mov	eax, DWORD PTR _tmp$[ebp]
	lea	ecx, DWORD PTR [esi+12]
	call	_store32
	pop	edi
	pop	esi
	pop	ebx
; Line 151
	leave
	ret	0
_belt_encrypt ENDP
_TEXT	ENDS
PUBLIC	_belt_decrypt
; Function compile flags: /Ogspy
;	COMDAT _belt_decrypt
_TEXT	SEGMENT
_key$ = -56						; size = 32
_tmp$ = -24						; size = 4
tv272 = -20						; size = 4
_i$ = -16						; size = 4
_d$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_out$ = 8						; size = 4
_c$ = 12						; size = 4
_in$ = 12						; size = 4
_ks$ = 16						; size = 4
_belt_decrypt PROC					; COMDAT
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
; Line 155
	mov	esi, DWORD PTR _in$[ebp]
	push	edi
	mov	ecx, esi
	call	_load32
; Line 156
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR _a$[ebp], eax
	call	_load32
; Line 157
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR _b$[ebp], eax
	call	_load32
; Line 158
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR _c$[ebp], eax
	call	_load32
; Line 162
	and	DWORD PTR _key$[ebp], 0
; Line 164
	mov	esi, DWORD PTR _ks$[ebp]
	mov	DWORD PTR _d$[ebp], eax
	push	7
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR _key$[ebp+4]
	rep stosd
	lea	eax, DWORD PTR _key$[ebp]
	xor	edi, edi
	sub	esi, eax
$LL6@belt_decry:
	lea	ecx, DWORD PTR [esi+edi*4]
	lea	ecx, DWORD PTR _key$[ebp+ecx]
; Line 166
	call	_load32
	mov	DWORD PTR _key$[ebp+edi*4], eax
	inc	edi
	cmp	edi, 8
	jb	SHORT $LL6@belt_decry
; Line 169
	and	DWORD PTR _i$[ebp], 0
	mov	edi, OFFSET _KeyIndex+216
	mov	DWORD PTR tv272[ebp], 8
	mov	esi, OFFSET _H
$LL13@belt_decry:
; Line 171
	mov	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _a$[ebp]
	push	5
	push	esi
	push	eax
	call	_G
	xor	DWORD PTR _b$[ebp], eax
; Line 172
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _d$[ebp]
	push	21					; 00000015H
	push	esi
	push	eax
	call	_G
	xor	DWORD PTR _c$[ebp], eax
; Line 173
	mov	eax, DWORD PTR [edi-4]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _b$[ebp]
	push	13					; 0000000dH
	push	esi
	push	eax
	call	_G
	sub	DWORD PTR _a$[ebp], eax
; Line 174
	mov	eax, DWORD PTR [edi-8]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	add	eax, DWORD PTR _c$[ebp]
	push	21					; 00000015H
	add	eax, DWORD PTR _b$[ebp]
	push	esi
	push	eax
	call	_G
	mov	ebx, eax
	push	8
	pop	eax
	sub	eax, DWORD PTR _i$[ebp]
; Line 177
	push	13					; 0000000dH
	xor	ebx, eax
	mov	eax, DWORD PTR [edi-12]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	sub	DWORD PTR _c$[ebp], ebx
	add	eax, DWORD PTR _c$[ebp]
	push	esi
	push	eax
	call	_G
	add	DWORD PTR _d$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [edi-16]
	mov	ecx, DWORD PTR _key$[ebp+ecx*4]
	push	21					; 00000015H
	add	ecx, eax
	push	esi
	push	ecx
	mov	DWORD PTR _tmp$[ebp], eax
	call	_G
	add	ebx, DWORD PTR _b$[ebp]
	add	esp, 72					; 00000048H
	xor	eax, ebx
	mov	ebx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR [edi-20]
	mov	eax, DWORD PTR _key$[ebp+eax*4]
	push	5
	add	eax, ebx
	push	esi
	push	eax
	call	_G
	xor	eax, DWORD PTR _c$[ebp]
	add	esp, 12					; 0000000cH
	inc	DWORD PTR _i$[ebp]
; Line 181
	mov	DWORD PTR _c$[ebp], ebx
; Line 182
	mov	ebx, DWORD PTR _a$[ebp]
	sub	edi, 28					; 0000001cH
	dec	DWORD PTR tv272[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	DWORD PTR _d$[ebp], ebx
	jne	$LL13@belt_decry
; Line 184
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, esi
	call	_store32
; Line 185
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [esi+4]
	call	_store32
; Line 186
	lea	ecx, DWORD PTR [esi+8]
	mov	eax, ebx
	call	_store32
; Line 187
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [esi+12]
	call	_store32
	pop	edi
	pop	esi
	pop	ebx
; Line 188
	leave
	ret	0
_belt_decrypt ENDP
_TEXT	ENDS
END
